[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "Warning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'readr' was built under R version 4.3.3\n\n\nWarning: package 'forcats' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "index.html#establishing-the-query-function",
    "href": "index.html#establishing-the-query-function",
    "title": "ST 558 Project 1",
    "section": "Establishing the Query Function",
    "text": "Establishing the Query Function\nWe need to construction a function to query the API [use the GET() function from library(httr)]. A helper function will be needed to take what is returned by get to turn it into a “nice tibble”.\nThis will be a function to query the API that allows the user to specify:\n\nYear of survey (default is 2022; must be a valid value between 2010 and 2022).\nThe numeric variables that could be queried for are:\n\nPWGTP - PUMS person weight, indicating the number of people that a single “person” record could “speak” for. (This variable must be included, and can not be removed by the user.)\nAGEP - Person age (default value along with PWGTP, but this one can be changed)\nGASP - The cost of gas for housing during the 12-month period reviewed.\nGRPIP - Gross Rent as a Percentage of household Income\nJWDP (time) - Time of departure for work.\nJWAP (time) - Time of arrival at work.\nJWMNP - The number of minutes spent commuting to work.\n\nThe categorical variables that could be queried for are:\n\nSEX - This was intended to refer to biological sex of the survey responder, but this survey is self-reporting and voluntary. This is to be the default categorical variable, and multiple can be selected.\nFER - Refers to “fertility”, an indicator variable for whether a woman has given birth within the previous 12 months from the survey. This is only valid for women aged 15 to 50.\nHHL - The household language.\nHISPEED - Indicates if the residence has high-speed internet (fiber optic, DSL, etc.)\nJWTRNS - The primary means of transportation to go to work.\nSCH - School enrollment, this indicates whether a person is currently enrolled in school; and what level they may be in.\nSCHL - The level of degree/schooling a person has received.\n\nThe geographic levels (All, Region, Division, State) should be specified.\nAny numeric, categorical, or geographic levels not specified above will be disregarded."
  },
  {
    "objectID": "index.html#obtaining-person-level-records",
    "href": "index.html#obtaining-person-level-records",
    "title": "ST 558 Project 1",
    "section": "Obtaining Person Level Records",
    "text": "Obtaining Person Level Records\nProcess the data in the tibble appropriately. Variable PWGTP represents the number of people/observations for a particular row."
  },
  {
    "objectID": "index.html#writing-generic-function-for-summarizing",
    "href": "index.html#writing-generic-function-for-summarizing",
    "title": "ST 558 Project 1",
    "section": "Writing generic function for summarizing",
    "text": "Writing generic function for summarizing\nA summary function has been created to take our census objects and provide some statistical information.\nThe function was created in a way that took up to three variables:\n1.  The `census` item generated in the function above;\n\n2.  (OPTIONAL) A vector or single item with keyword `numerics=` which will contain the **numeric** variables selected. An error is generated if the keyword `numerics=` is used with a categorical column.\n\n+ Note: The `PWGTP` variable is not returned by default. This must be specifically requested in `numerics=` in order to call it.\n\n3.  (OPTIONAL) A vector or single item with the keyword `categoricals=` which will contain the **categorical** variables selected. An error is generated in the keyword `categoricals=` is used with a numeric column.\nThe summary statistics returned will be the mean and standard deviation for each numeric variable, and the counts of each factor for categorical variables. These are returned as named lists, which are convenient for assigning to a variable and calling specific items.\n\nsummary.census &lt;- function(object, ...) {\n  \n  args &lt;- list(...)\n  \n  # Stop if any keywords are included that are not `numerics` or `categoricals`\n  if (length(setdiff(names(args), c(\"numerics\", \"categoricals\")))) {\n    stop(\"Keyword error: keywords must be `numerics=` or `categoricals=` to specify column summary request.\")\n  }\n  \n  # If `numerics` are provided, confirm they are actually numeric variables:\n  if (\"numerics\" %in% names(args)) {\n    if (!all(sapply(object[args$numerics], is.numeric))) {\n      stop(\"Selected numeric variables should all be numeric.\")\n    } else { numerics &lt;- args$numerics }\n  } else {\n    numerics &lt;- names(select(object, where(is.numeric)))\n    # Unless it's specified, do not return PWGTP variable.    \n    numerics &lt;- numerics[!numerics %in% \"PWGTP\"]\n  }\n  \n  # If `categoricals` are provided, confirm they're actually factors:\n  if (\"categoricals\" %in% names(args)) {\n    if (!all(sapply(object[args$categoricals], is.factor))) {\n      stop(\"Selected categorical variables should all be factors.\")\n    } else { categoricals &lt;- args$categoricals }\n  } else categoricals &lt;- names(select(object, where(is.factor)))\n  \n  # Reduce the input `object` to its selected variables.\n  object &lt;- object |&gt; select(numerics, categoricals)\n  \n  # Function to produce `summary` reporting for census object\n  report &lt;- function(obj) {\n    # Numeric variables: return a named list with `mean` and `sigma`\n    if (class(obj) == \"numeric\") list(mean=mean(obj), sigma=sd(obj))\n    # Categorical variables: return unique factors and their counts.\n    else if (class(obj) == \"factor\") table(obj)\n    # Fail if object class is neither numeric nor factor.\n    else stop(\"Improper class passed to report function.\")\n  }\n  lapply(as.list(object), FUN=report)\n}\n\n# THIS IS JUST TO SHOW THAT IT WORKS. Show some examples using the function created here.\nexample &lt;- iris\nclass(example) &lt;- c(\"census\", class(iris))\nsummary(example)\n\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %&gt;% select(numerics)\n\n  # Now:\n  data %&gt;% select(all_of(numerics))\n\nSee &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;.\n\n\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %&gt;% select(categoricals)\n\n  # Now:\n  data %&gt;% select(all_of(categoricals))\n\nSee &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;.\n\n\n$Sepal.Length\n$Sepal.Length$mean\n[1] 5.843333\n\n$Sepal.Length$sigma\n[1] 0.8280661\n\n\n$Sepal.Width\n$Sepal.Width$mean\n[1] 3.057333\n\n$Sepal.Width$sigma\n[1] 0.4358663\n\n\n$Petal.Length\n$Petal.Length$mean\n[1] 3.758\n\n$Petal.Length$sigma\n[1] 1.765298\n\n\n$Petal.Width\n$Petal.Width$mean\n[1] 1.199333\n\n$Petal.Width$sigma\n[1] 0.7622377\n\n\n$Species\nobj\n    setosa versicolor  virginica \n        50         50         50"
  },
  {
    "objectID": "index.html#plot-function",
    "href": "index.html#plot-function",
    "title": "ST 558 Project 1",
    "section": "Plot function",
    "text": "Plot function\nSimilar to the summary adaptation above, a plot adaptation is also generated for census objects. This is designed to require a single categorical variable and a single numerical variable, as strings. The usage for this command is\nplot(object, categorical=\"&lt;Categorical Var&gt;\", numerical=\"&lt;Numerical Variable&gt;\")\nwhere  and  are substitued with the names of the desired columns of their requisite classes.\n\n# Run plot() on a `census` object.\n# Usage: plot(`Census object`, cat=&lt;Categorical Variable for X axis&gt;, num=&lt;Numeric Variable for Y axis&gt;)\n\nplot.census &lt;- function(object, categorical, numerical, ...) {\n  args = list(...) # Look at possibly adding options for customization. Add a title, for instance?\n  ggplot(object,\n         aes(x=get(categorical), y=get(numerical), weight=PWGTP)) +\n    geom_boxplot()\n}"
  }
]